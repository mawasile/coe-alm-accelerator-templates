#We are going to set websiteId as a pipeline variable only if there is a Power Page in the Dataverse

parameters:
- name: serviceConnectionUrl
  type: string
  #In case of exporting Power Page, we expect that the solution unique name will be the same as the Power Page name (name field in a given WebSite record)
- name: solutionName
  type: string
- name: powerPageWebsiteId
  #This is the websiteId of the Power Page that can be used to get the website's record from Dataverse. If no given, we will try to get it from the solution name
  type: string

steps:
- pwsh: | 
    $websiteId = $null
    if ('${{parameters.powerPageWebsiteId}}' -ne $null -and '${{parameters.powerPageWebsiteId}}' -ne '') {
      #powerPageWebsiteId is set globally as pipeline variable. If it is set then we will use it in the rest of the pipeline.
      write-host "Setting websiteId using global pipeline variable"
      $websiteId = '${{parameters.powerPageWebsiteId}}'
    }
    else
    {
      # load PowerShell files into memory
      . "$env:POWERSHELLPATH/dataverse-webapi-functions.ps1"
      $dataverseHost = Get-HostFromUrl "${{parameters.serviceConnectionUrl}}"
      $odataQuery = "adx_websites?`$filter=adx_name eq '${{parameters.solutionName}}'"    

      try{
        $response = Invoke-DataverseHttpGet $env:SPNTOKEN $dataverseHost $odataQuery
      }
      catch{
        #Write-Host "Error: $($_.Exception.Message)"
        # if Power Pages solutions are not installed in Dataverse. adx_websites table will not be created.
      }
      if($null -ne $response.value -and $response.value.count -gt 0){
        write-host "Setting websiteId using Dataverse"
        $websiteId = $response.value[0].adx_websiteid
      }
    }
    Write-Host "WebsiteId: $($websiteId)"
    echo "##vso[task.setvariable variable=WebsiteId]$websiteId"
  displayName: 'Set Website Variable'
